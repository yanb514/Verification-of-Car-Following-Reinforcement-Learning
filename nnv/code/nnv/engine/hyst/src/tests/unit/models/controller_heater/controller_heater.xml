<?xml version="1.0" encoding="iso-8859-1"?>
<!--
This is a basic example to demonstrate the SpaceEx file format for the composition of
two automata with HIOA parallel composition.
Generic (template) models for a heater and a controller are declared as components.
The temperature of the heater is a controlled (output) variable in the heater model
and an uncontrolled (input) variable in the controller model.
The two are instantiated as part of the "system" component, where the temperature
variables of the two are "connected" by binding them to the same system variable.

Heater and controller are interacting using synchronization labels, so the labels
must be declared as non-local.

In this model, the heater is unrestricted in the temperature range, so it has no
invariant and no guards, it only determines the flow. 
The controller forces transitions based on the value of the temperature, but is
has no continuous variables by himself. So it has invariants and guards, but no
flow or assignments.
-->
<sspaceex xmlns="http://www-verimag.imag.fr/xml-namespaces/sspaceex" version="0.2" math="SpaceEx">
  <component id="HeaterTemplate">
    <note>This is a simple model of a heater.
The temperature t rises with rate r_up if the heater is on, and falls with rate r_down if the heater is off.
The heater switches on and off by synchronizing with the controller on the labels turn_on and turn_off.
The temperature t is a controlled (output) variable of the heater.</note>
    <param name="t" type="real" d1="1" d2="1" local="false" dynamics="any" controlled="true" />
    <param name="r_up" type="real" d1="1" d2="1" local="false" dynamics="const" />
    <param name="r_down" type="real" d1="1" d2="1" local="false" dynamics="const" />
    <param name="turn_on" type="label" local="false" />
    <param name="turn_off" type="label" local="false" />
    <location id="1" name="heater_off" x="67.0" y="189.0" width="100" height="80">
      <note>In this location the temperature is falling because the heater is off.</note>
      <flow>t' == r_down</flow>
    </location>
    <location id="2" name="heater_on" x="303.0" y="189.0" width="100" height="80">
      <note>In this location the temperature is rising because the heater is on.</note>
      <flow>t' == r_up</flow>
    </location>
    <transition source="1" target="2">
      <note>Switching the heater on.</note>
      <label>turn_on</label>
      <assignment>t' == t</assignment>
      <labelposition x="0.0" y="-56.0" />
      <middlepoint x="183.0" y="102.0" />
    </transition>
    <transition source="2" target="1">
      <note>Switching the heater off.</note>
      <label>turn_off</label>
      <assignment>t' == t</assignment>
      <labelposition x="0.0" y="10.0" />
      <middlepoint x="185.0" y="284.0" />
    </transition>
  </component>
  <component id="ControllerTemplate">
    <note>The controller switches the heater on and off at thresholds t_off and t_on.
It can be verified that the controller keeps the temperature between t_off and t_on.
The controller switches the heater on and off by synchronizing with on the labels turn_on and turn_off.
The temperature t is an uncontrolled (input) variable of the controller.</note>
    <param name="t" type="real" d1="1" d2="1" local="false" dynamics="any" controlled="false" />
    <param name="t_on" type="real" d1="1" d2="1" local="false" dynamics="const" />
    <param name="t_off" type="real" d1="1" d2="1" local="false" dynamics="const" />
    <param name="turn_on" type="label" local="false" />
    <param name="turn_off" type="label" local="false" />
    <location id="1" name="controller_off" x="67.0" y="171.0" width="100" height="80">
      <note>Waiting for the temperature to rise.</note>
      <invariant>t &gt;= t_on</invariant>
    </location>
    <location id="2" name="controller_on" x="308.0" y="170.0" width="100" height="80">
      <note>Waiting for the temperature to fall.</note>
      <invariant>t &lt;= t_off</invariant>
    </location>
    <transition source="1" target="2">
      <note>When the temperature reaches the lower threshold, switch the heater on.</note>
      <label>turn_on</label>
      <guard>t &lt;= t_on</guard>
      <labelposition x="0.0" y="-47.0" width="74.0" height="50.0" />
      <middlepoint x="177.5" y="101.0" />
    </transition>
    <transition source="2" target="1">
      <note>When the temperature reaches the upper threshold, switch the heater off.</note>
      <label>turn_off</label>
      <guard>t &gt;= t_off</guard>
      <labelposition x="0.0" y="10.0" width="86.0" height="50.0" />
      <middlepoint x="181.5" y="249.0" />
    </transition>
  </component>
  <component id="TimerTemplate">
    <param name="t" type="real" d1="1" d2="1" local="false" dynamics="any" controlled="true" />
    <param name="t_max" type="real" d1="1" d2="1" local="false" dynamics="const" />
    <location id="1" name="ticking">
      <flow>t' == 1</flow>
      <invariant>t &lt;= t_max</invariant>
    </location>
  </component>
  <component id="timed_system">
    <note>The system consists of a heater and a controller and timer.</note>
    <param name="temp" type="real" d1="1" d2="1" local="false" dynamics="any" />
    <param name="time" type="real" d1="1" d2="1" local="false" dynamics="any" />
    <param name="turn_on" type="label" local="true" />
    <param name="turn_off" type="label" local="true" />
    <bind component="HeaterTemplate" as="Heater" x="180.0" y="184.0">
      <map key="t">temp</map>
      <map key="r_up">2</map>
      <map key="r_down">-1</map>
      <map key="turn_on">turn_on</map>
      <map key="turn_off">turn_off</map>
    </bind>
    <bind component="ControllerTemplate" as="Controller" x="179.0" y="29.0">
      <map key="t">temp</map>
      <map key="t_on">18</map>
      <map key="t_off">21</map>
      <map key="turn_on">turn_on</map>
      <map key="turn_off">turn_off</map>
    </bind>
    <bind component="TimerTemplate" as="timer">
      <map key="t">time</map>
    </bind>
  </component>
  <component id="system">
    <note>The system consists of a heater and a controller.
The temperatures of the heater is part of the system interface.

The temperature variables of the two are "connected" by binding them to the same system variable.

Heater and controller are interacting using synchronization labels, so the labels must be declared as non-local.</note>
    <param name="t" type="real" d1="1" d2="1" local="false" dynamics="any" />
    <param name="turn_on" type="label" local="true" />
    <param name="turn_off" type="label" local="true" />
    <bind component="HeaterTemplate" as="Heater" x="364.0" y="204.0">
      <map key="t">t</map>
      <map key="r_up">2</map>
      <map key="r_down">-1</map>
      <map key="turn_on">turn_on</map>
      <map key="turn_off">turn_off</map>
    </bind>
    <bind component="ControllerTemplate" as="Controller" x="375.0" y="74.0">
      <map key="t">t</map>
      <map key="t_on">18</map>
      <map key="t_off">21</map>
      <map key="turn_on">turn_on</map>
      <map key="turn_off">turn_off</map>
    </bind>
  </component>
</sspaceex>

